type LoginResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  Login(password: String!): LoginResponse!
  Logout: LogoutResponse!
  Register(username: String!, password: String!): RegisterResponse!
  SendContact(name: String!, email: String!, subject: String!, body: String!): SendContactResponse!
  AddNotice(title: String!, body: String!): AddNoticeResponse!
  RemoveNotice(id: ID!): RemoveNoticeResponse!
  UpdateNotice(id: ID!, title: String, body: String): UpdateNoticeResponse!
}

type LogoutResponse {
  ok: Boolean!
  error: String
}

type Me {
  id: String
}

type MeResponse {
  ok: Boolean!
  error: String
  me: Me
}

type Query {
  Me: MeResponse!
  ListNotice(page: Int, title: String): ListNoticeResponse!
  ReadNotice(id: ID!): ReadNoticeResponse!
}

type RegisterResponse {
  ok: Boolean!
  error: String
}

type SendContactResponse {
  ok: Boolean!
  error: String
}

type AddNoticeResponse {
  ok: Boolean!
  error: String
}

type ListNoticeResponse {
  ok: Boolean!
  error: String
  notice: [Notice]
  lastPage: Int!
}

type ReadNoticeResponse {
  ok: Boolean!
  error: String
  notice: Notice
}

type RemoveNoticeResponse {
  ok: Boolean!
  error: String
}

type UpdateNoticeResponse {
  ok: Boolean!
  error: String
}

scalar Date

type Admin {
  id: ID!
  username: String!
  password: String!
  created_at: Date!
}

type Notice {
  id: ID!
  num: Int!
  title: String!
  body: String!
  created_at: Date!
  updated_at: Date
}

type Question {
  id: ID!
  name: String!
  password: String!
  phone: String
  email: String
  isReply: Boolean!
  title: String!
  body: String!
  replyId: String
  reply: Reply
  created_at: Date!
  updated_at: Date
}

type Reply {
  id: ID!
  body: String!
  questionId: String
  question: Question
  created_at: Date!
  updated_at: Date
}

type Story {
  id: ID!
  title: String!
  body: String!
  thumbnail: String
  tags: [String]
  created_at: Date!
  updated_at: Date
}
